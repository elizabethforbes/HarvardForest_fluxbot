# plot:
hrlymeans_bystand %>%
ggplot(aes(x=mean_hrly_auto, y=mean_hrly_bots, color = "pink"))+
geom_point()+
geom_smooth(method = "lm", se = TRUE, color = "black")+
stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
formula = y~x,
parse = TRUE,
label.x = "right",
label.y = "top")+
labs(x = "mean hourly flux, HF autochambers", y = "mean hourly flux, Fluxbots")+
facet_wrap(~stand)+
theme_bw()+
theme(
legend.position = "none",
axis.title.x = element_text(face = "bold", color = "darkred"),
axis.title.y = element_text(face = "bold", color = "blue"))
# autochamber:
HFauto_hrlymeansall <- HFauto_fluxestimates %>%
group_by(hour) %>%
summarize(mean_hrly_auto = mean(rs, na.rm = TRUE))
# bots:
HFbots_hrlymeansall <- HF_fluxestimates %>%
mutate(hour = lubridate::hour(hour_of_obs)) %>%
group_by(hour) %>%
summarize(mean_hrly_bots = mean(fluxL_umolm2sec, na.rm = TRUE))
# bind:
hrlymeans_all <- merge(HFauto_hrlymeansall, HFbots_hrlymeansall, by = c("hour"))
# plot:
hrlymeans_all %>%
ggplot(aes(x=mean_hrly_auto, y=mean_hrly_bots, color = "pink"))+
geom_point()+
geom_smooth(method = "lm", se = TRUE, color = "black")+
stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
formula = y~x,
parse = TRUE,
label.x = "right",
label.y = "top")+
labs(x = "mean hourly flux, HF autochambers", y = "mean hourly flux, Fluxbots")+
theme_bw()+
theme(
legend.position = "none",
axis.title.x = element_text(face = "bold", color = "darkred"),
axis.title.y = element_text(face = "bold", color = "blue"))
# summary stands by stand, fluxbot array:
HF_fluxestimates %>%
# filter(fluxL_umolm2sec > -1) %>%
group_by(stand) %>%
summarise(mean_flux = mean(fluxL_umolm2sec, na.rm = TRUE),
min_flux = min(fluxL_umolm2sec, na.rm = TRUE),
max_flux = max(fluxL_umolm2sec, na.rm = TRUE),
sd_flux = sd(fluxL_umolm2sec, na.rm = TRUE),
tenth_quantile = quantile(fluxL_umolm2sec, probs = .1, na.rm = TRUE),
ninetieth_quantile = quantile(fluxL_umolm2sec, probs = .9, na.rm = TRUE),
variance = var(fluxL_umolm2sec))
# summary stats by stand, autochamber array:
HFauto_fluxestimates %>%
group_by(stand) %>%
summarise(mean_flux = mean(rs, na.rm = TRUE),
min_flux = min(rs, na.rm = TRUE),
max_flux = max(rs, na.rm = TRUE),
sd_flux = sd(rs, na.rm = TRUE),
tenth_quantile = quantile(rs, probs = .1, na.rm = TRUE),
ninetieth_quantile = quantile(rs, probs = .9, na.rm = TRUE),
variance = var(rs))
# summary stats by stand, autochamber array:
HFauto_fluxestimates %>%
group_by(stand) %>%
summarise(mean_flux = mean(rs, na.rm = TRUE),
min_flux = min(rs, na.rm = TRUE),
max_flux = max(rs, na.rm = TRUE),
sd_flux = sd(rs, na.rm = TRUE),
tenth_quantile = quantile(rs, probs = .1, na.rm = TRUE),
ninetieth_quantile = quantile(rs, probs = .9, na.rm = TRUE),
variance = var(rs, na.rm = TRUE))
HF_fluxestimates <- HF_fluxestimates %>%
mutate(date = as_date(hour_of_obs)) %>%
# pull "hour" out:
mutate(hour = hour(hour_of_obs)) %>%
# assign time of day to each observation:
mutate(timeofday = case_when(hour > 4 & hour < 8 ~ "dawn",
hour > 7 & hour < 11 ~ "morning",
hour > 10 & hour < 15 ~ "midday",
hour > 14 & hour < 17 ~ "afternoon",
hour > 16 & hour < 20 ~ "dusk",
TRUE ~ "night"))
View(HF_fluxestimates)
HFauto_fluxestimates <- HFauto_fluxestimates %>%
mutate(date = as_date(hour_of_obs)) %>%
# pull "hour" out:
mutate(hour = hour(hour_of_obs)) %>%
# assign time of day to each observation:
mutate(timeofday = case_when(hour > 4 & hour < 8 ~ "dawn",
hour > 7 & hour < 11 ~ "morning",
hour > 10 & hour < 15 ~ "midday",
hour > 14 & hour < 17 ~ "afternoon",
hour > 16 & hour < 20 ~ "dusk",
TRUE ~ "night"))
View(HFauto_fluxestimates)
HFauto_fluxestimates <- HFauto_fluxestimates %>%
mutate(date = as_date(hour_of_obs)) %>%
# pull "hour" out:
# mutate(hour = hour(hour_of_obs)) %>%
# assign time of day to each observation:
mutate(timeofday = case_when(hour > 4 & hour < 8 ~ "dawn",
hour > 7 & hour < 11 ~ "morning",
hour > 10 & hour < 15 ~ "midday",
hour > 14 & hour < 17 ~ "afternoon",
hour > 16 & hour < 20 ~ "dusk",
TRUE ~ "night"))
HFauto_fluxestimates <- HFauto_fluxestimates %>%
# mutate(date = as_date(hour_of_obs)) %>%
# pull "hour" out:
# mutate(hour = hour(hour_of_obs)) %>%
# assign time of day to each observation:
mutate(timeofday = case_when(hour > 4 & hour < 8 ~ "dawn",
hour > 7 & hour < 11 ~ "morning",
hour > 10 & hour < 15 ~ "midday",
hour > 14 & hour < 17 ~ "afternoon",
hour > 16 & hour < 20 ~ "dusk",
TRUE ~ "night"))
# summary stats by time of day:
HF_fluxestimates %>%
# filter(fluxL_umolm2sec > -1) %>%
group_by(timeofday) %>%
summarise(mean_flux = mean(fluxL_umolm2sec, na.rm = TRUE),
min_flux = min(fluxL_umolm2sec, na.rm = TRUE),
max_flux = max(fluxL_umolm2sec, na.rm = TRUE),
sd_flux = sd(fluxL_umolm2sec, na.rm = TRUE),
tenth_quantile = quantile(fluxL_umolm2sec, probs = .1, na.rm = TRUE),
ninetieth_quantile = quantile(fluxL_umolm2sec, probs = .9, na.rm = TRUE),
variance = var(fluxL_umolm2sec))
# summary stats by time of day:
HF_fluxestimates$timeofday <- factor(HF_fluxestimates$timeofday,
levels = c("dawn", "morning", "midday", "afternoon", "dusk", "night"))
HF_fluxestimates %>%
# filter(fluxL_umolm2sec > -1) %>%
group_by(timeofday) %>%
summarise(mean_flux = mean(fluxL_umolm2sec, na.rm = TRUE),
min_flux = min(fluxL_umolm2sec, na.rm = TRUE),
max_flux = max(fluxL_umolm2sec, na.rm = TRUE),
sd_flux = sd(fluxL_umolm2sec, na.rm = TRUE),
tenth_quantile = quantile(fluxL_umolm2sec, probs = .1, na.rm = TRUE),
ninetieth_quantile = quantile(fluxL_umolm2sec, probs = .9, na.rm = TRUE),
variance = var(fluxL_umolm2sec))
HFauto_fluxestimates$timeofday <- factor(HFauto_fluxestimates$timeofday,
levels = c("dawn", "morning", "midday", "afternoon", "dusk", "night"))
HFauto_fluxestimates %>%
# filter(fluxL_umolm2sec > -1) %>%
group_by(timeofday) %>%
summarise(mean_flux = mean(fluxL_umolm2sec, na.rm = TRUE),
min_flux = min(fluxL_umolm2sec, na.rm = TRUE),
max_flux = max(fluxL_umolm2sec, na.rm = TRUE),
sd_flux = sd(fluxL_umolm2sec, na.rm = TRUE),
tenth_quantile = quantile(fluxL_umolm2sec, probs = .1, na.rm = TRUE),
ninetieth_quantile = quantile(fluxL_umolm2sec, probs = .9, na.rm = TRUE),
variance = var(fluxL_umolm2sec))
HFauto_fluxestimates %>%
# filter(fluxL_umolm2sec > -1) %>%
group_by(timeofday) %>%
summarise(mean_flux = mean(rs, na.rm = TRUE),
min_flux = min(rs, na.rm = TRUE),
max_flux = max(rs, na.rm = TRUE),
sd_flux = sd(rs, na.rm = TRUE),
tenth_quantile = quantile(rs, probs = .1, na.rm = TRUE),
ninetieth_quantile = quantile(rs, probs = .9, na.rm = TRUE),
variance = var(rs, na.rm = TRUE))
HFauto_fluxestimates %>%
ggplot(aes(x=timeofday, y=rs, fill=stand))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.2, .1),
legend.text = element_text(size = 8), legend.title = element_blank())+
# ylim(0,6)+
labs(x="", y="spread of flux estimates by time of day", title = "HF autochambers")+
scale_fill_manual(legend_title, values = c("darkolivegreen3", "lightsalmon1"))
HFauto_fluxestimates %>%
filter(rs < 15) %>%
ggplot(aes(x=timeofday, y=rs, fill=stand))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.2, .1),
legend.text = element_text(size = 8), legend.title = element_blank())+
# ylim(0,6)+
labs(x="", y="spread of flux estimates by time of day", title = "HF autochambers")+
scale_fill_manual(legend_title, values = c("darkolivegreen3", "lightsalmon1"))
b <- means_timeofday %>%
ggplot(aes(x=timeofday.x, y=mean_timeofday_bots, fill=stand.x))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.1, .8),
legend.text = element_text(size = 8), legend.title = element_blank())+
ylim(0,6)+
labs(x="", y="average flux by time of day", title = "Fluxbots")+
scale_fill_manual(legend_title, values = c("darkolivegreen4", "lightsalmon3"))
HFauto_fluxestimates %>%
filter(rs < 15) %>%
ggplot(aes(x=timeofday, y=rs, fill=stand))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.2, .1),
legend.text = element_text(size = 8), legend.title = element_blank())+
# ylim(0,6)+
labs(x="", y="spread of flux estimates by time of day", title = "HF autochambers")+
scale_fill_manual(legend_title, values = c("darkolivegreen3", "lightsalmon1"))
HFauto_fluxestimates %>%
filter(rs < 15) %>%
ggplot(aes(x=timeofday, y=rs, fill=stand))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.1, .8),
legend.text = element_text(size = 8), legend.title = element_blank())+
# ylim(0,6)+
labs(x="", y="spread of flux estimates by time of day", title = "HF autochambers")+
scale_fill_manual(legend_title, values = c("darkolivegreen3", "lightsalmon1"))
HFauto_fluxestimates %>%
filter(rs < 15) %>%
ggplot(aes(x=timeofday, y=rs, fill=stand))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.1, .9),
legend.text = element_text(size = 8), legend.title = element_blank())+
# ylim(0,6)+
labs(x="", y="spread of flux estimates by time of day", title = "HF autochambers")+
scale_fill_manual(legend_title, values = c("darkolivegreen3", "lightsalmon1"))
HFauto_fluxestimates %>%
filter(rs < 15) %>%
ggplot(aes(x=timeofday, y=rs, fill=stand))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.1, .9),
legend.text = element_text(size = 8), legend.title = element_blank())+
ylim(0,11)+
labs(x="", y="spread of flux estimates by time of day", title = "HF autochambers")+
scale_fill_manual(legend_title, values = c("darkolivegreen3", "lightsalmon1"))
HFauto_fluxestimates %>%
filter(rs < 15) %>%
ggplot(aes(x=timeofday, y=rs, fill=stand))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.1, .9),
legend.text = element_text(size = 8), legend.title = element_blank())+
ylim(0,12)+
labs(x="", y="spread of flux estimates by time of day", title = "HF autochambers")+
scale_fill_manual(legend_title, values = c("darkolivegreen3", "lightsalmon1"))
HFauto_fluxestimates %>%
filter(rs < 15) %>%
ggplot(aes(x=timeofday, y=rs, fill=stand))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.1, .9),
legend.text = element_text(size = 8), legend.title = element_blank())+
# ylim(0,12)+
labs(x="", y="spread of flux estimates by time of day", title = "HF autochambers")+
scale_fill_manual(legend_title, values = c("darkolivegreen3", "lightsalmon1"))
HFauto_fluxestimates %>%
filter(rs < 15) %>%
ggplot(aes(x=timeofday, y=rs, fill=stand))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.1, .9),
legend.text = element_text(size = 8), legend.title = element_blank())+
ylim(0,12)+
labs(x="", y="spread of flux estimates by time of day", title = "HF autochambers")+
scale_fill_manual(legend_title, values = c("darkolivegreen3", "lightsalmon1"))
HF_fluxestimates %>%
ggplot(aes(x=timeofday, y=fluxL_umolm2sec, fill=stand))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.1, .8),
legend.text = element_text(size = 8), legend.title = element_blank())+
ylim(0,6)+
labs(x="", y="spread of flux estimates by time of day", title = "Fluxbots")+
scale_fill_manual(legend_title, values = c("darkolivegreen4", "lightsalmon3"))
HF_fluxestimates %>%
ggplot(aes(x=timeofday, y=fluxL_umolm2sec, fill=stand))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.1, .8),
legend.text = element_text(size = 8), legend.title = element_blank())+
# ylim(0,6)+
labs(x="", y="spread of flux estimates by time of day", title = "Fluxbots")+
scale_fill_manual(legend_title, values = c("darkolivegreen4", "lightsalmon3"))
HF_fluxestimates %>%
filter(fluxL_umolm2sec > 0) %>%
ggplot(aes(x=timeofday, y=fluxL_umolm2sec, fill=stand))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.1, .8),
legend.text = element_text(size = 8), legend.title = element_blank())+
# ylim(0,6)+
labs(x="", y="spread of flux estimates by time of day", title = "Fluxbots")+
scale_fill_manual(legend_title, values = c("darkolivegreen4", "lightsalmon3"))
HF_fluxestimates %>%
filter(fluxL_umolm2sec > 0) %>%
ggplot(aes(x=timeofday, y=fluxL_umolm2sec, fill=stand))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.1, .8),
legend.text = element_text(size = 8), legend.title = element_blank())+
ylim(0,12)+
labs(x="", y="spread of flux estimates by time of day", title = "Fluxbots")+
scale_fill_manual(legend_title, values = c("darkolivegreen4", "lightsalmon3"))
HF_fluxestimates %>%
filter(fluxL_umolm2sec > 0) %>%
ggplot(aes(x=timeofday, y=fluxL_umolm2sec, fill=stand))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.1, .9),
legend.text = element_text(size = 8), legend.title = element_blank())+
ylim(0,12)+
labs(x="", y="spread of flux estimates by time of day", title = "Fluxbots")+
scale_fill_manual(legend_title, values = c("darkolivegreen4", "lightsalmon3"))
c <- HFauto_fluxestimates %>%
filter(rs < 15) %>%
ggplot(aes(x=timeofday, y=rs, fill=stand))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.1, .9),
legend.text = element_text(size = 8), legend.title = element_blank())+
ylim(0,12)+
labs(x="", y="spread of flux estimates by time of day", title = "HF autochambers")+
scale_fill_manual(legend_title, values = c("darkolivegreen3", "lightsalmon1"))
d <- HF_fluxestimates %>%
filter(fluxL_umolm2sec > 0) %>%
ggplot(aes(x=timeofday, y=fluxL_umolm2sec, fill=stand))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.1, .9),
legend.text = element_text(size = 8), legend.title = element_blank())+
ylim(0,12)+
labs(x="", y="spread of flux estimates by time of day", title = "Fluxbots")+
scale_fill_manual(legend_title, values = c("darkolivegreen4", "lightsalmon3"))
ggarrange(c,d)
c <- HFauto_fluxestimates %>%
filter(rs < 15) %>%
ggplot(aes(x=timeofday, y=rs, fill=stand))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.2, .9),
legend.text = element_text(size = 8), legend.title = element_blank())+
ylim(0,12)+
labs(x="", y="spread of flux estimates by time of day", title = "HF autochambers")+
scale_fill_manual(legend_title, values = c("darkolivegreen3", "lightsalmon1"))
d <- HF_fluxestimates %>%
filter(fluxL_umolm2sec > 0) %>%
ggplot(aes(x=timeofday, y=fluxL_umolm2sec, fill=stand))+
geom_boxplot()+
theme_classic2()+
theme(legend.position = c(.2, .9),
legend.text = element_text(size = 8), legend.title = element_blank())+
ylim(0,12)+
labs(x="", y="spread of flux estimates by time of day", title = "Fluxbots")+
scale_fill_manual(legend_title, values = c("darkolivegreen4", "lightsalmon3"))
ggarrange(c,d)
HFauto_fluxestimates %>%
filter(rs < 15) %>%
group_by(timeofday) %>%
summarise(mean_flux = mean(rs, na.rm = TRUE),
min_flux = min(rs, na.rm = TRUE),
max_flux = max(rs, na.rm = TRUE),
sd_flux = sd(rs, na.rm = TRUE),
tenth_quantile = quantile(rs, probs = .1, na.rm = TRUE),
ninetieth_quantile = quantile(rs, probs = .9, na.rm = TRUE),
variance = var(rs, na.rm = TRUE))
HF_fluxestimates %>%
filter(fluxL_umolm2sec > -1) %>%
group_by(timeofday) %>%
summarise(mean_flux = mean(fluxL_umolm2sec, na.rm = TRUE),
min_flux = min(fluxL_umolm2sec, na.rm = TRUE),
max_flux = max(fluxL_umolm2sec, na.rm = TRUE),
sd_flux = sd(fluxL_umolm2sec, na.rm = TRUE),
tenth_quantile = quantile(fluxL_umolm2sec, probs = .1, na.rm = TRUE),
ninetieth_quantile = quantile(fluxL_umolm2sec, probs = .9, na.rm = TRUE),
variance = var(fluxL_umolm2sec))
HF_fluxestimates %>%
filter(fluxL_umolm2sec > -1) %>%
group_by(timeofday) %>%
summarise(mean_flux = mean(fluxL_umolm2sec, na.rm = TRUE),
min_flux = min(fluxL_umolm2sec, na.rm = TRUE),
max_flux = max(fluxL_umolm2sec, na.rm = TRUE),
sd_flux = sd(fluxL_umolm2sec, na.rm = TRUE),
tenth_quantile = quantile(fluxL_umolm2sec, probs = .1, na.rm = TRUE),
ninetieth_quantile = quantile(fluxL_umolm2sec, probs = .9, na.rm = TRUE),
variance = var(fluxL_umolm2sec))
# fluxbots: remove values less than -1 --
HFbots_timeofday <- HF_fluxestimates %>%
mutate(date = as_date(hour_of_obs)) %>%
filter(fluxL_umolm2sec > -1) %>%
# pull "hour" out:
mutate(hour = hour(hour_of_obs)) %>%
mutate(timeofday = case_when(hour > 4 & hour < 8 ~ "dawn",
hour > 7 & hour < 11 ~ "morning",
hour > 10 & hour < 15 ~ "midday",
hour > 14 & hour < 17 ~ "afternoon",
hour > 16 & hour < 20 ~ "dusk",
TRUE ~ "night")) %>%
group_by(date, timeofday) %>%
summarize(mean_timeofday_bots = mean(fluxL_umolm2sec, na.rm = TRUE),
stand = stand) %>%
unite("date_timeofday", date:timeofday, sep = ", ", remove = FALSE)
# combine:
means_timeofday <- merge(HFauto_timeofday, HFbots_timeofday, by = "date_timeofday")
legend_title <- "time of day"
means_timeofday$timeofday.x <- factor(means_timeofday$timeofday.x,
levels = c("dawn", "morning", "midday", "afternoon", "dusk", "night"))
means_timeofday %>%
ggplot(aes(x=mean_timeofday_auto, y=mean_timeofday_bots, color = timeofday.x, fill = timeofday.x))+
geom_point(color = "black", pch = 21)+
geom_smooth(aes(color=timeofday.x), method = "lm", se = FALSE, linewidth = 0.5)+
scale_fill_manual(legend_title, values = c("white", "lemonchiffon2", "yellow2", "goldenrod3", "steelblue4", "grey26"))+
scale_color_manual(legend_title, values = c("white", "lemonchiffon2", "yellow2", "goldenrod3", "steelblue4", "grey26"))+
stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
formula = y~x,
parse = TRUE,
label.x = "right",
label.y = "bottom",
)+
labs(x = "mean flux, HF autochambers", y = "mean flux, Fluxbots")+
facet_wrap(~stand.x)+
theme_dark()
# bots:
HFbots_hrlymeansall <- HF_fluxestimates %>%
filter(fluxL_umolm2sec > -1) %>%
mutate(hour = lubridate::hour(hour_of_obs)) %>%
group_by(hour) %>%
summarize(mean_hrly_bots = mean(fluxL_umolm2sec, na.rm = TRUE))
# bind:
hrlymeans_all <- merge(HFauto_hrlymeansall, HFbots_hrlymeansall, by = c("hour"))
# plot:
hrlymeans_all %>%
ggplot(aes(x=mean_hrly_auto, y=mean_hrly_bots, color = "pink"))+
geom_point()+
geom_smooth(method = "lm", se = TRUE, color = "black")+
stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
formula = y~x,
parse = TRUE,
label.x = "right",
label.y = "top")+
labs(x = "mean hourly flux, HF autochambers", y = "mean hourly flux, Fluxbots")+
theme_bw()+
theme(
legend.position = "none",
axis.title.x = element_text(face = "bold", color = "darkred"),
axis.title.y = element_text(face = "bold", color = "blue"))
means_timeofday %>%
ggplot(aes(x=mean_timeofday_auto, y=mean_timeofday_bots, color = stand.x, fill = stand.x))+
geom_point(color = "black", pch = 21)+
geom_smooth(aes(color=stand.x), method = "lm", se = FALSE, linewidth = 0.5)+
scale_fill_manual(legend_title, values = c("darkolivegreen3", "lightsalmon1"))+
scale_color_manual(legend_title, values = c("darkolivegreen3", "lightsalmon1"))+
stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
formula = y~x,
parse = TRUE,
label.x = "right",
label.y = "bottom",
vstep = .1,
size = 3
)+
labs(x = "mean flux, HF autochambers", y = "mean flux, Fluxbots")+
facet_wrap(~timeofday.x)+
theme_dark()
means_timeofday %>%
ggplot(aes(x=mean_timeofday_auto, y=mean_timeofday_bots, color = timeofday.x, fill = timeofday.x))+
geom_point(color = "black", pch = 21)+
geom_smooth(aes(color=timeofday.x), method = "lm", se = FALSE, linewidth = 0.5)+
scale_fill_manual(legend_title, values = c("white", "lemonchiffon2", "yellow2", "goldenrod3", "steelblue4", "grey26"))+
scale_color_manual(legend_title, values = c("white", "lemonchiffon2", "yellow2", "goldenrod3", "steelblue4", "grey26"))+
stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
formula = y~x,
parse = TRUE,
label.x = "right",
label.y = "bottom",
)+
labs(x = "mean flux, HF autochambers", y = "mean flux, Fluxbots")+
# facet_wrap(~stand.x)+
theme_dark()
library(rstatix)
# using library rstatix for tidy-compatible testing:
t <- HFauto_fluxestimates %>%
t_test(rs ~ stand)
t
?t_test
summary(t)
# using library rstatix for tidy-compatible testing:
t <- HFauto_fluxestimates %>%
t_test(rs ~ stand, ref.group = "healthy")
t
summary(t)
t
t2 <- HF_fluxestimates %>%
t_test(fluxL_umolm2sec ~ stand, ref.group = "healthy")
t2
summary(t)
# HF AUTOCHAMBERS
t <- HFauto_fluxestimates %>%
t_test(rs ~ stand, ref.group = "healthy", detailed = TRUE)
t
# FLUXBOTS
t2 <- HF_fluxestimates %>%
t_test(fluxL_umolm2sec ~ stand, ref.group = "healthy", detailed = TRUE)
t2
# HF AUTOCHAMBERS
t <- HFauto_fluxestimates %>%
filter(rs < 15) %>%
t_test(rs ~ stand, ref.group = "healthy", detailed = TRUE)
t
# FLUXBOTS
t2 <- HF_fluxestimates %>%
filter(fluxL_umolm2sec > 0) %>%
t_test(fluxL_umolm2sec ~ stand, ref.group = "healthy", detailed = TRUE)
t2
