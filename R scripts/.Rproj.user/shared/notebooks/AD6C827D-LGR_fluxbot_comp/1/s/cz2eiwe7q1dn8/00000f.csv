"0",""
"0","calculate_regressions_custom_intervals <- function(time_series_df, custom_intervals_df) {"
"0","  # Extract timestamp and data columns from the time series dataframe"
"0","  timestamp_col <- as.POSIXct(time_series_df$Time, format = ""%Y-%m-%d %H:%M:%S"", tz = ""America/New_York"")"
"0","  data_col <- time_series_df$co2     "
"0",""
"0","  # Initialize an empty dataframe to store the results"
"0","  results_df <- data.frame("
"0","    start_timestamp = character(),"
"0","    end_timestamp = character(),"
"0","    linear_beta = numeric(),"
"0","    quadratic_beta = numeric()"
"0","  )"
"0","  "
"0","  # Quality control thresholds:"
"0","    diff_threshold <- 5 #difference in start-end delta needs to be greater than 5ppm"
"0","    max_threshold <- 3000 #eliminate any intervals that contain co2 concentrations greater than 3k ppm"
"0","    length_threshold <- 15 #the length of an interval needs to be at least 25 observations (40 obs per 4mins interval for fluxbot)"
"0",""
"0","  # Loop through each row in the custom intervals dataframe"
"0","  for (i in seq_len(nrow(custom_intervals_df))) {"
"0","    # Extract start and end points for the current row"
"0","    start_point <- custom_intervals_df$Start[i]"
"0","    end_point <- custom_intervals_df$End[i]"
"0",""
"0","    # Find the closest timestamp to start_point and end_point"
"0","    start_index <- which.min(abs(timestamp_col - start_point))"
"0","    end_index <- which.min(abs(timestamp_col - end_point))"
"0",""
"0","    # Extract the data for the current interval"
"0","    interval_data <- time_series_df$co2[start_index:end_index]"
"0","    interval_timestamp <- time_series_df$Time[start_index:end_index]"
"0","    "
"0","    # Quality control checks:"
"0","    if (abs(interval_data[1] - interval_data[length(interval_data)]) < diff_threshold) {"
"0","      cat(""Skipping interval due to extremely small delta:"", i, ""\n"")"
"0","      next  # Skip to the next iteration"
"0","    }"
"0","    if(max(interval_data) > max_threshold) {"
"0","      cat(""Skipping interval: concentration too high:"", i, ""\n"")"
"0","      next # Skip to the next iteration"
"0","    }"
"0","    if(length(interval_data) < length_threshold) {"
"0","      cat(""Skipping interval due to insufficient length:"", i, ""\n"")"
"0","      next # Skip to the next iteration"
"0","    }"
"0",""
"0","    # Linear regression"
"0","    linear_model <- lm(interval_data ~ as.numeric(difftime(interval_timestamp, min(interval_timestamp), units = ""secs"")))"
"0","    linear_results <- summary(linear_model)"
"0","    linear_beta <- coef(linear_results)[2]  # Extract the beta coefficient"
"0",""
"0","    # Quadratic regression"
"0","    quadratic_model <- lm(interval_data ~ "
"0","                            as.numeric(difftime(interval_timestamp, min(interval_timestamp), "
"0","                                                units = ""secs"")) +"
"0","                            I(as.numeric(difftime(interval_timestamp, "
"0","                                                  min(interval_timestamp), "
"0","                                                  units = ""secs""))^2))"
"0","    quadratic_results <- summary(quadratic_model)"
"0","    quadratic_beta <- coef(quadratic_results)[2]  # Extract the beta coefficient"
"0",""
"0","    # Append the results to the dataframe"
"0","    results_df <- rbind(results_df, data.frame("
"0","      start_timestamp = start_point,"
"0","      end_timestamp = end_point,"
"0","      linear_beta = linear_beta,"
"0","      quadratic_beta = quadratic_beta"
"0","    ))"
"0","  }"
"0",""
"0","  # Return the results"
"0","  return(results_df)"
"0","}"
"0",""
"0",""
